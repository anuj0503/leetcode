class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n];
        
        // Arrays.fill(dp, -1);
        
        dp[n - 1] = 1;
        int ans = dfs(0, nums, dp);
        
        // for(int i = 0; i < n; i++){
        //     System.out.print(dp[i] + " ");
        // }
        
        if(ans == 1)
            return true;

        return false;
    }
    
    private int dfs(int index, int[] nums, int[] dp){
        if(index >= nums.length)
            return -1;
        
        if(dp[index] != 0)
            return dp[index];
        
        int c = -1;
        for(int i = 1; i <= nums[index]; i++){
            c = Math.max(c, dfs(index + i , nums, dp));
            
            if(c > -1)
                break;
        }
        
        dp[index] = c;
        
        return c;
    }
}
